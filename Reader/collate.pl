#!/usr/bin/perl

use strict;
use Data::Dumper;
use JSON;

my $PATH = 'SP_path.txt';
my $DIR = './';
my $VERSES_RE = qr/^SP[A-I]/;

my $POEM_JS = 'stepwise_poem.js';


my $XMAP = { W => -1, C => 0, E => 1 };
my $YMAP = { S => -1, C => 0, N => 1 };
my $ZMAP = { deeps => -1, ground => 0, heaven => 1 };
my $TMAP = { past => -1, present => 0, future => 1 };


my ( $figures, $coords ) = read_path();

my $stanzas = read_stanzas();



my $json = JSON->new();
my $coords_js = $json->pretty->encode($figures);

for my $k ( keys %$stanzas ) {
    $stanzas->{$k}[0] .= " (" . join(', ', @{$figures->{$k}}) . ")";
}

my $stanzas_js = $json->pretty->encode($stanzas);


open(my $fh, ">:encoding(utf8)", $POEM_JS) || die("Couldn't write to $POEM_JS: $!");

print $fh <<EOJS;
// Generated by $0

var stanzas = $stanzas_js;

var coords = $coords_js;

EOJS

close $fh;





sub read_path {

    open PATH, $PATH || die("$!");

    my $fig_coords = {};
    my $coords = {};
    
    while ( <PATH> ) {
        next unless /^[A-E]\d/;
        chomp;
        my ( $fig, $dir, $x, $y, $t, $z, $l ) = split(/\t/);
        $x ||= 'C';
        $y ||= 'C';
        
        die("Bad x '$x' at $fig") unless defined $XMAP->{$x};
        die("Bad y '$y' at $fig") unless defined $YMAP->{$y};
        die("Bad z '$z' at $fig") unless defined $ZMAP->{$z};
        die("Bad t '$t' at $fig") unless defined $TMAP->{$t};
        
        my $cx = $XMAP->{$x}; 
        my $cy = $YMAP->{$y};
        my $cz = $ZMAP->{$z};
        my $ct = $TMAP->{$t};
        
        my $key = join(',', $cx, $cy, $cz, $ct);

        $fig_coords->{$fig} = [ $cx + 0, $cy + 0, $cz + 0, $ct + 0 ];

        $coords->{$key} = $fig;
    }
    close PATH;

    return (  $fig_coords, $coords );
}


sub read_stanzas {
    opendir(my $dh, $DIR) || die("Can't open $DIR $!");

    my $stanzas = {};

    while( my $item = readdir($dh) ) {
        next if $item =~ /~$/;
        if( $item =~ /$VERSES_RE/ ) {
            read_file("$DIR/$item", $stanzas);
        }
    }
    
    return $stanzas;
}

sub read_file {
    my ( $file, $stanzas ) = @_;

    open VERSES, $file || die("Can't open $file: $!");

    my $fig = undef;
    my @lines = ();

    while ( my $line = <VERSES> ) {
        chomp $line;
        if( $line =~ /^Figure\s+([A-E]\d+):\s*([A-Z].*)$/ ) {
            my ( $newfig, $title ) = ( $1, $2 );
            if( $fig ) {
                if( $stanzas->{$fig} ) {
                    die("Duplicate stanza - $fig - file $file");
                }
                $stanzas->{$fig} = [];
                push @{$stanzas->{$fig}}, @lines;
            }
            @lines = ( $line );
            $fig = $newfig;
        } else {
            if( $line =~ /^[^\s]/ ) {
                push @lines, $line;
            }
        }
    }

    if( @lines ) {
        $stanzas->{$fig} = [];
        push @{$stanzas->{$fig}}, @lines;
    }
}


